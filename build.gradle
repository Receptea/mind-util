apply plugin: 'java'

group 'com.github.iarkn'
version '1.0'

ext {
    artifactName = 'mind-util'
    sdkRoot = System.getenv('ANDROID_SDK_ROOT') ?: System.getenv('ANDROID_HOME')
    requiresSpecialTreatment = System.getProperty('os.name').toLowerCase(Locale.ROOT).contains('windows')
}

repositories {
    mavenCentral()
    maven { url 'https://jitpack.io' }
}

dependencies {
    annotationProcessor 'com.github.Anuken:jabel:0.6.0'
    compileOnly "com.github.Anuken.Mindustry:core:$gameVersion"
    compileOnly "com.github.Anuken.Arc:arc-core:$gameVersion"
}

jar {
    archiveFileName = "$artifactName-desktop.jar"
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE

    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }

    from(rootDir) {
        include 'mod.json', 'icon.png'
    }
}

task dex {
    dependsOn 'jar'

    doLast {
        exec {
            workingDir "$buildDir/libs"

            def files = (
                configurations.compileClasspath.asList() + configurations.runtimeClasspath.asList() +
                [new File("$sdkRoot/platforms/android-$apiLevel/android.jar")]
            )
            def args = [
                'd8', *files.collect { ['--classpath', it.path] }.flatten(),
                '--min-api', '14', '--output', "$artifactName-dex.jar", "$artifactName-desktop.jar"
            ]

            if (requiresSpecialTreatment) {
                commandLine 'cmd', '/c', args
            } else {
                commandLine args
            }
        }
    }
}

task deploy(type: Jar) {
    dependsOn 'jar', 'dex'

    archiveFileName = "${artifactName}.jar"

    from(
        zipTree("$buildDir/libs/$artifactName-desktop.jar"),
        zipTree("$buildDir/libs/$artifactName-dex.jar")
    )

    doLast {
        delete {
            delete "$buildDir/libs/$artifactName-desktop.jar"
            delete "$buildDir/libs/$artifactName-dex.jar"
        }
    }
}

tasks.withType(JavaCompile) {
    sourceCompatibility = 16
    targetCompatibility = 8

    options.encoding = 'UTF-8'
    options.fork = true
    options.compilerArgs += ['-Xlint:all', '--release', '8']
}
