import groovy.json.JsonSlurper

apply plugin: 'java'

group 'com.github.iarkn'
version '1.0'

sourceCompatibility = 16
targetCompatibility = 8

buildscript {
    ext {
        def json = new JsonSlurper()
        def mod = json.parse(new File('mod.json'))

        artifactName = "${mod.name}-${mod.version}"
        sdkRoot = System.getenv('ANDROID_HOME')
        // For the special operating system
        requiresSpecialTreatment = System.getProperty('os.name').toLowerCase(Locale.ROOT).contains('windows')
    }

    repositories {
        mavenCentral()
        maven { url 'https://jitpack.io' }
    }

    dependencies {
        classpath "com.github.Anuken.Mindustry:core:$gameVersion"
        classpath "com.github.Anuken.Arc:arc-core:$gameVersion"
    }
}

repositories {
    mavenCentral()
    maven { url 'https://jitpack.io' }
}

dependencies {
    annotationProcessor 'com.github.Anuken:jabel:34e4c172e65b3928cd9eabe1993654ea79c409cd'
    compileOnly "com.github.Anuken.Mindustry:core:$gameVersion"
    compileOnly "com.github.Anuken.Arc:arc-core:$gameVersion"    
}

jar {
    archiveFileName = "$artifactName-desktop.jar"
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE

    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree() }
    }

    from(rootDir) {
        include 'mod.json'
    }
}

task dex {
    dependsOn 'jar'

    doFirst {
        exec {
            workingDir "$buildDir/libs"

            // Collect dependencies needed for desugaring
            def files = (
                configurations.compileClasspath.asList() + configurations.runtimeClasspath.asList() +
                [new File("$sdkRoot/platforms/android-$apiLevel/android.jar")]
            )
            // d8 [classpath ...] --min-api 14 --output [dex.jar] [desktop.jar]
            def args = [
                'd8', *files.collect { ['--classpath', it.path] }.flatten(), 
                '--min-api', '14', '--output', "$artifactName-dex.jar", "$artifactName-desktop.jar"
            ]

            // Dex and desugar files -- this requires 'd8' in your PATH environment variable
            if (requiresSpecialTreatment) {
                commandLine 'cmd', '/c', args
            } else {
                commandLine args
            }
        }
    }
}

task deploy(type: Jar) {
    dependsOn 'jar', 'dex'

    archiveFileName = "${artifactName}.jar"

    from(
        zipTree("$buildDir/libs/$artifactName-desktop.jar"),
        zipTree("$buildDir/libs/$artifactName-dex.jar")
    )

    doLast {
        delete {
            delete "$buildDir/libs/$artifactName-desktop.jar"
            delete "$buildDir/libs/$artifactName-dex.jar"
        }
    }
}

tasks.withType(JavaCompile) {
    sourceCompatibility = 16
    targetCompatibility = 8

    options.encoding = 'UTF-8'
    options.fork = true
    // If you are not using JDK 16, this will not work
    options.compilerArgs += ['-Xlint:all', '--release', '8']
    // Fix Jabel not being able to access 'com.sun.tools.javac.code/parser' because it's not exported. Similar issue:
    // https://stackoverflow.com/questions/65380359/lomboks-access-to-jdk-compilers-internal-packages-incompatible-with-java-16
    options.forkOptions.jvmArgs += [
        '--add-opens=jdk.compiler/com.sun.tools.javac.code=ALL-UNNAMED',
        '--add-opens=jdk.compiler/com.sun.tools.javac.parser=ALL-UNNAMED'
    ]
}
